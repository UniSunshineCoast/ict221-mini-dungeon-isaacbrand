v0.0.1-----------------------------------------------------------------------------------------------------------
Base project directory structure to visualise requirements (may be altered -> mainly used for planning)

> Altered Cell class into an abstract class
> Added class skeletons into dungeon.engine package
    > Level
    > Movement
    > Position
    > Player
    > Score
    > Interaction (interface for cells with player interaction)
> Created new package "cells" in dungeon.engine
> Added class skeletons into dungeon.engine.cells package
    > Empty
    > Entry
    > Gold
    > HealthPotion
    > Ladder
    > MeleeMutant
    > RangedMutant
    > Trap
    > Wall
    > Collectable (abstract - Gold + HealthPotion classes)
    > Mutant (abstract - MeleeMutant + RangedMutant classes)

v0.0.2-----------------------------------------------------------------------------------------------------------
Cleaned up file directory from previous messy commit during planning process.

v0.0.3-----------------------------------------------------------------------------------------------------------
Basic implementation of abstract classes and interaction interface for cell creation

> Occupied Cell abstract class with basic requirements of all cells
> Occupied Interaction interface with checks for player-cell interactions
> Occupied Collectable abstract class with basic requirements of all collectable items (gold + health potion)
> Occupied Mutant abstract class with basic requirements of all mutant enemies, extends Cell
> Created new changelog file for tracking commit version changes

v0.0.4-----------------------------------------------------------------------------------------------------------
Basic implementation of the Player class

> Occupied Player class with basic implementation / planning of player requirements
> Implemented / planned basic getters + setters for relevant class requirements

v0.0.5-----------------------------------------------------------------------------------------------------------
Basic implementation of the Position class and Player class Position integration and movement methods

> Occupied Position class with basic methods
> Removed Movement temp class and made movement methods occur inside the Player class for a more direct approach

v0.0.6-----------------------------------------------------------------------------------------------------------
Implemented individual cell classes

> Implemented Interaction interface for Entry and Ladder cells
> Refactored and optimised Mutant abstract class
> Added ranged attack calculations to RangedMutant class

v0.0.7-----------------------------------------------------------------------------------------------------------
Implemented Level class

> Base implementation general level requirements, currently implemented methods for:
    > Map creation, occupation and properties
    > Player-cell interactions

v0.1.0-----------------------------------------------------------------------------------------------------------
Game Engine Implementation and basic console game playable for testing

> Implemented GameEngine class which handles all core game functionality as well as a console interface for testing,
current features include:
    > Game state management (level, player, difficulty and status)
    > Game mechanics (essentially just core logic to make the game run)
    > Level progression (difficulty scaling, level transitions)
> Fixed method setEntryPos in Player class to handle all levels
> Removed console output from tryRangedAttack method in RangedMutant class, output now handled in the GameEngine class
> Updated Gold and HealthPotion class return outputs for better integration with the console game version

v0.1.1-----------------------------------------------------------------------------------------------------------
Implemented Score class with persistent score tracking.
Added score integration with the GameEngine and Player classes.
Optimised Player class.

> Added getHighscores method to GameEngine class
> Added score getters and setters to Player class

> Improved move handling in Player class by changing method type from boolean to void
> Removed setPosition method in Player class (unused)
> Removed getMaxSteps method in Player class (unused)
> Removed the level field in Player, updated references in GameEngine
(fragmented implementation with levelNum field doing level tracking)
> Refactored levelNum field in GameEngine to level
> Fixed console output in the MeleeMutant class

v0.1.2-----------------------------------------------------------------------------------------------------------
Game save state implementation

> Added game save/load functionality to the Game Engine for console testing
> Implemented Serializable for GameEngine, Level, Position and Cell classes
> Removed StackPane from Cell abstract class due to issues with saving,
new Cell handling for JavaFX implemented with the CellFX class
> Added placeholder implementation for CellFX class and updated Controller to utilise new implementation
> Updated highscore save file name to "md_highscores"

v0.2.0-----------------------------------------------------------------------------------------------------------
Implemented GameEngine Testing

Tests:
> Map Size
> Initial Game State
> Movement
> Step Tracking
> Invalid Move (attempting to walk into a wall)
> Game Over
> Interactions (if an interaction occurs on player/cell contact, does not test the type of interaction)

v0.3.0-----------------------------------------------------------------------------------------------------------
Significant OOD Improvements, full-coverage update to GameEngine testing and further bug fixes / optimisations

"0 hours of sleep, the excerpt"

Main Changes
> Created ConsoleUI class, ScoreHandler interface and Map interface
> Major optimisations, improvements and clean-up concerning the OOD of the engine package
> Test coverage complete implementation, now handles tests for:
    > Basic game state (map, player, game status)
    > Player movement (all directions, collisions)
    > Player/cell interactions (all interactable cells and their core features)
    > Game progression (level transitions, difficulty increase)
    > Game completion
    > Game over conditions (hp = 0, steps = 100)
    > High score handling with persistent scores
    > Map generation
    > Save/load functionality and error handling
    > Helper methods to generate custom controlled map environments to assist in testing

Details
> Implemented proper composition between GameEngine and Player/Level classes
> Refactored processMove method in GameEngine
> Improved encapsulation in GameEngine class
> Implemented copyFrom method in Player class for save/load handling
> Created a dedicated ConsoleUI class and transferred handling for text-based gameplay from GameEngine class

v0.3.1-----------------------------------------------------------------------------------------------------------
Code cleanup and optimisations

Collectable
> Removed isCollected and setCollected methods (handled through interact and cellRemoveOnUse, redundant)

RangedMutant
> Removed setPosition(Pos pos) and getPositon methods (setPosition(int x, int y) handles process, redundant)
> Made Position field final (only used privately for calculations)

Cell
> removed getX and getY methods (handled through Level class, redundant)
> removed fields x and y (redundant)

CellFX
> Refactored CellFX to GUI directory

ConsoleUI
> Added help command and display

GameEngine
> Optimised movement handling
> Optimised loadGame method by reusing the saveExists() method rather than a dedicated existence check

v0.4.0-----------------------------------------------------------------------------------------------------------
Basic GUI and Controller implementation

> Implemented complete layout structure, functionality and event handling for GUI version of the game

Features:
> Player status panel with HP, step, score and level indicators
> Save, help and quit buttons
> Basic controller for movement
> Map display with player positioning highlight tracking
> Added load and quit confirmations and a game over display
> High score display
> Save and quit option in quit confirmation menu
> Auto-scrolling game status updates
> Control disabling on game end

v0.4.1-----------------------------------------------------------------------------------------------------------
CellFX implementation and GUI image display

CellFX
> Implemented image display capabilities with coloured outlines for reference in help guide
> Implemented a player position overlay
> Implemented image pre-loading and caching

Controller
> Integrated CellFX class image methods
> Re-calculated cell assignments to work with image allocations
> Bug fixes and improvements tailored to issues from integration

v1.0.0-----------------------------------------------------------------------------------------------------------
Bug fixes and improvements

> Improved and standardised class commenting schemes
> Improved OOD of Gold, HealthPotion, MeleeMutant, Mutant, RangedMutant and Trap class
> Refactored Interaction interface into dungeon.engine.cells
> Refactored Empty and Wall classes into cells.set
> Refactored Collectable, Entry, Gold, HealthPotion, Ladder, MeleeMutant,
Mutant, RangedMutant and Trap classes into cells.interactable
> Improved OOD of Map interface

v1.0.1-----------------------------------------------------------------------------------------------------------
Bug fix

> Fixed cells increasing size exponentially in laptop version

