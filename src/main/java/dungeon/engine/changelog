v0.0.1-----------------------------------------------------------------------------------------------------------
Base project directory structure to visualise requirements (may be altered -> mainly used for planning)

> Altered Cell class into an abstract class
> Added class skeletons into dungeon.engine package
    > Level
    > Movement
    > Position
    > Player
    > Score
    > Interaction (interface for cells with player interaction)
> Created new package "cells" in dungeon.engine
> Added class skeletons into dungeon.engine.cells package
    > Empty
    > Entry
    > Gold
    > HealthPotion
    > Ladder
    > MeleeMutant
    > RangedMutant
    > Trap
    > Wall
    > Collectable (abstract - Gold + HealthPotion classes)
    > Mutant (abstract - MeleeMutant + RangedMutant classes)

v0.0.2-----------------------------------------------------------------------------------------------------------
Cleaned up file directory from previous messy commit during planning process.

v0.0.3-----------------------------------------------------------------------------------------------------------
Basic implementation of abstract classes and interaction interface for cell creation

> Occupied Cell abstract class with basic requirements of all cells
> Occupied Interaction interface with checks for player-cell interactions
> Occupied Collectable abstract class with basic requirements of all collectable items (gold + health potion), extends Cell
> Occupied Mutant abstract class with basic requirements of all mutant enemies, extends Cell
> Created new changelog file for tracking commit version changes

v0.0.4-----------------------------------------------------------------------------------------------------------
Basic implementation of the Player class

> Occupied Player class with basic implementation / planning of player requirements
> Implemented / planned basic getters + setters for relevant class requirements

v0.0.5-----------------------------------------------------------------------------------------------------------
Basic implementation of the Position class and Player class Position integration and movement methods

> Occupied Position class with basic methods
> Removed Movement temp class and made movement methods occur inside the Player class for a more direct approach

v0.0.6-----------------------------------------------------------------------------------------------------------
Implemented individual cell classes

> Implemented Interaction interface for Entry and Ladder cells
> Refactored and optimised Mutant abstract class
> Added ranged attack calculations to RangedMutant class

v0.0.7-----------------------------------------------------------------------------------------------------------
Implemented Level class

> Base implementation general level requirements, currently implemented methods for:
    > Map creation, occupation and properties
    > Player-cell interactions

v0.1.0-----------------------------------------------------------------------------------------------------------
Game Engine Implementation and basic console game playable for testing

> Implemented GameEngine class which handles all core game functionality as well as a console interface for testing, current features include:
    > Game state management (level, player, difficulty and status)
    > Game mechanics (essentially just core logic to make the game run)
    > Level progression (difficulty scaling, level transitions)
> Fixed method setEntryPos in Player class to handle all levels
> Removed console output from tryRangedAttack method in RangedMutant class, output now handled in the GameEngine class
> Updated Gold and HealthPotion class return outputs for better integration with the console game version in the GameEngine class

v0.1.1-----------------------------------------------------------------------------------------------------------
Implemented Score class with persistent score tracking.
Added score integration with the GameEngine and Player classes.
Optimised Player class.

> Added getHighscores method to GameEngine class
> Added score getters and setters to Player class

> Improved move handling in Player class by changing method type from boolean to void
> Removed setPosition method in Player class (unused)
> Removed getMaxSteps method in Player class (unused)
> Removed the level field in Player, updated references in GameEngine (fragmented implementation with levelNum field doing level tracking)
> Refactored levelNum field in GameEngine to level
> Fixed console output in the MeleeMutant class

v0.1.2-----------------------------------------------------------------------------------------------------------
Game save state implementation

> Added game save/load functionality to the Game Engine for console testing
> Implemented Serializable for GameEngine, Level, Position and Cell classes
> Removed StackPane from Cell abstract class due to issues with saving, new Cell handling for JavaFX implemented with the CellFX class
> Added placeholder implementation for CellFX class and updated Controller to utilise new implementation
> Updated highscore save file name to "md_highscores"